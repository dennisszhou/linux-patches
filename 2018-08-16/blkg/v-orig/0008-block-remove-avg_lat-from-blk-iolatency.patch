From b2e8260a41fbcd9963b0bc3004694a056c09d75d Mon Sep 17 00:00:00 2001
From: Dennis Zhou <dennisszhou@gmail.com>
Date: Wed, 15 Aug 2018 15:52:33 -0700
Subject: [PATCH 8/9] block: remove avg_lat from blk-iolatency

avg_lat is tracked in blk-iolatency to help users tune the latency
threshold. The previous patch introduced the latency tracking to
blk-cgroup and therefore makes this unnecessary. So, in this patch the
latency moving average is removed.

Signed-off-by: Dennis Zhou <dennisszhou@gmail.com>
---
 Documentation/admin-guide/cgroup-v2.rst | 12 ++-----
 block/blk-iolatency.c                   | 45 ++-----------------------
 2 files changed, 6 insertions(+), 51 deletions(-)

diff --git a/Documentation/admin-guide/cgroup-v2.rst b/Documentation/admin-guide/cgroup-v2.rst
index 2dc8f95077aa..f436610b18dc 100644
--- a/Documentation/admin-guide/cgroup-v2.rst
+++ b/Documentation/admin-guide/cgroup-v2.rst
@@ -1519,16 +1519,10 @@ IO Latency Interface Files
 	  depth
 		This is the current queue depth for the group.
 
-	  avg_lat
+	  avg_lat (usec)
 		This is an exponential moving average with a decay rate of 1/exp
-		bound by the sampling interval.  The decay rate interval can be
-		calculated by multiplying the win value in io.stat by the
-		corresponding number of samples based on the win value.
-
-	  win
-		The sampling window size in milliseconds.  This is the minimum
-		duration of time between evaluation events.  Windows only elapse
-		with IO activity.  Idle periods extend the most recent window.
+		every 60s using windows of 1s.  A window elapses only with
+		active bio.  Idle periods extend the current window.
 
 PID
 ---
diff --git a/block/blk-iolatency.c b/block/blk-iolatency.c
index 9d7052bad6f7..919755ad6829 100644
--- a/block/blk-iolatency.c
+++ b/block/blk-iolatency.c
@@ -69,7 +69,6 @@
 #include <linux/module.h>
 #include <linux/timer.h>
 #include <linux/memcontrol.h>
-#include <linux/sched/loadavg.h>
 #include <linux/sched/signal.h>
 #include <trace/events/block.h>
 #include "blk-rq-qos.h"
@@ -126,9 +125,6 @@ struct iolatency_grp {
 	u64 min_lat_nsec;
 	u64 cur_win_nsec;
 
-	/* total running average of our io latency. */
-	u64 lat_avg;
-
 	/* Our current number of IO's for the last summation. */
 	u64 nr_samples;
 
@@ -137,25 +133,6 @@ struct iolatency_grp {
 
 #define BLKIOLATENCY_MIN_WIN_SIZE (100 * NSEC_PER_MSEC)
 #define BLKIOLATENCY_MAX_WIN_SIZE NSEC_PER_SEC
-/*
- * These are the constants used to fake the fixed-point moving average
- * calculation just like load average.  The call to CALC_LOAD folds
- * (FIXED_1 (2048) - exp_factor) * new_sample into lat_avg.  The sampling
- * window size is bucketed to try to approximately calculate average
- * latency such that 1/exp (decay rate) is [1 min, 2.5 min) when windows
- * elapse immediately.  Note, windows only elapse with IO activity.  Idle
- * periods extend the most recent window.
- */
-#define BLKIOLATENCY_NR_EXP_FACTORS 5
-#define BLKIOLATENCY_EXP_BUCKET_SIZE (BLKIOLATENCY_MAX_WIN_SIZE / \
-				      (BLKIOLATENCY_NR_EXP_FACTORS - 1))
-static const u64 iolatency_exp_factors[BLKIOLATENCY_NR_EXP_FACTORS] = {
-	2045, // exp(1/600) - 600 samples
-	2039, // exp(1/240) - 240 samples
-	2031, // exp(1/120) - 120 samples
-	2023, // exp(1/80)  - 80 samples
-	2014, // exp(1/60)  - 60 samples
-};
 
 static inline struct iolatency_grp *pd_to_lat(struct blkg_policy_data *pd)
 {
@@ -462,7 +439,7 @@ static void iolatency_check_latencies(struct iolatency_grp *iolat, u64 now)
 	struct child_latency_info *lat_info;
 	struct blk_rq_stat stat;
 	unsigned long flags;
-	int cpu, exp_idx;
+	int cpu;
 
 	blk_rq_stat_init(&stat);
 	preempt_disable();
@@ -480,18 +457,6 @@ static void iolatency_check_latencies(struct iolatency_grp *iolat, u64 now)
 
 	lat_info = &parent->child_lat;
 
-	/*
-	 * CALC_LOAD takes in a number stored in fixed point representation.
-	 * Because we are using this for IO time in ns, the values stored
-	 * are significantly larger than the FIXED_1 denominator (2048).
-	 * Therefore, rounding errors in the calculation are negligible and
-	 * can be ignored.
-	 */
-	exp_idx = min_t(int, BLKIOLATENCY_NR_EXP_FACTORS - 1,
-			div64_u64(iolat->cur_win_nsec,
-				  BLKIOLATENCY_EXP_BUCKET_SIZE));
-	CALC_LOAD(iolat->lat_avg, iolatency_exp_factors[exp_idx], stat.mean);
-
 	/* Everything is ok and we don't need to adjust the scale. */
 	if (stat.mean <= iolat->min_lat_nsec &&
 	    atomic_read(&lat_info->scale_cookie) == DEFAULT_SCALE_COOKIE)
@@ -817,15 +782,11 @@ static size_t iolatency_pd_stat(struct blkg_policy_data *pd, char *buf,
 				size_t size)
 {
 	struct iolatency_grp *iolat = pd_to_lat(pd);
-	unsigned long long avg_lat = div64_u64(iolat->lat_avg, NSEC_PER_USEC);
-	unsigned long long cur_win = div64_u64(iolat->cur_win_nsec, NSEC_PER_MSEC);
 
 	if (iolat->rq_depth.max_depth == UINT_MAX)
-		return scnprintf(buf, size, " depth=max avg_lat=%llu win=%llu",
-				 avg_lat, cur_win);
+		return scnprintf(buf, size, " depth=max");
 
-	return scnprintf(buf, size, " depth=%u avg_lat=%llu win=%llu",
-			 iolat->rq_depth.max_depth, avg_lat, cur_win);
+	return scnprintf(buf, size, " depth=%u", iolat->rq_depth.max_depth);
 }
 
 
-- 
2.17.1

